navigator.personaSSO = {
  id: {
    watch: function(opts){
      console.log(opts, "navigator.personaSSO options");
      navigator.personaSSO.loggedInUser = opts.loggedInUser;
      navigator.personaSSO.handlers.onlogin = opts.onlogin;
      navigator.personaSSO.handlers.onlogout = opts.onlogout;
    }
  },
  handlers: {},
  ui: {
    newMaker: function(userID, formAnchor) {
      /**
       * load in HTML include containing the HTML form
       * display form
       * munge values into form
       * attach submit handlers to the form
       * AJAX post to createMaker API
       * remove form and listeners once everything is sorted
       */
      $.get("<%= process.env.AUDIENCE %>/ajax/forms/new_user.html", function(html) {
        form_html = $(html);
        form_frag = $(form_html).appendTo(formAnchor);
        form_frag.submit(function(data) {
          $.ajax({
            type: "POST",
            url: "<%= process.env.AUDIENCE %>/user/create/",
            dataType: "json",
            data: {
              "_id": userID,
              "email": userID,
              "displayName": $('#nick').val()
            },
            success: function(resp) {
              navigator.personaSSO.ui.existingMaker(userID, resp.displayName);
              form_frag.css({"height": 0});
              form_frag.remove();
            },
            error: function(resp) {
              // TODO - handle errors
              console.log(resp, 'failure');
              return false;
            }
          });
          return false;
        });
      });
    },
    existingMaker: function(userID, displayName) {
      /**
       * API call to the getUserData API
       * display logged in user data in the UI (where to be defined)
       */
      // TODO - code for when we're not passed a displayName
      $("#identity").text(displayName);
    },
    loggedOut: function() {
      /**
       * remove logged in user data from the UI
       * remove any listeners we have attached
       */
      $("#identity").text('');
    }
  },
  init: function(element, onready){
    element.src = "<%= process.env.AUDIENCE %>/signin?" + encodeURIComponent(window.location.protocol + "//" + window.location.host);

    var handlers = {
      "onready": onready,
      "onlogout": function(){
        navigator.personaSSO.id.loggedInUser = null;
        navigator.personaSSO.id.handlers.onlogout();
      },
      "onlogin": function(data){
        console.log('hello - onlogin, sso.js');
        navigator.personaSSO.id.loggedInUser = data.loggedInUser;
        navigator.personaSSO.id.handlers.onlogin(data.assertion);
      }
    };

    // Create IE + others compatible event handler
    var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
    var eventer = window[eventMethod];
    var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

    // Listen to message from child window
    eventer(messageEvent, function(e){
      try {

        var e = JSON.parse(e.data);
        console.log(e, 'sso.js - JSON.parse');
        
        try {
          var handle = navigator.personaSSO.handlers[e.topic];
          console.log(handle, 'sso.js - handle');
          
          if (typeof(handle) == 'function'){
            console.log(e.data);
            handle(e.topic, e.data);
          }
        }
        catch(e){
          console.log("Error in handler.");
          console.log(e.message);
        }
      }
      catch(e){
        console.log("Error parsing event: " + event.data);
      }
    }, false);

  }
};
